import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')
if not TOKEN:
    raise RuntimeError("TOKEN environment variable not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, name TEXT, is_coach INTEGER DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS events
                 (event_id INTEGER PRIMARY KEY AUTOINCREMENT, date TEXT, type TEXT, status TEXT DEFAULT 'open', group_msg_id INTEGER)''')
    c.execute('''CREATE TABLE IF NOT EXISTS participants
                 (event_id INTEGER, user_id INTEGER,
                 FOREIGN KEY(event_id) REFERENCES events(event_id),
                 FOREIGN KEY(user_id) REFERENCES users(user_id))''')
    conn.commit()
    conn.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start_command(message: types.Message):
    user = message.from_user
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, name) VALUES (?, ?)", (user.id, user.full_name))
    conn.commit()
    conn.close()
    await message.answer(f"‚úÖ {user.full_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")

# –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
async def help_command(message: types.Message):
    text = (
        "üèí *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤*\n"
        "/mark ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\n\n"
        "üëë *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞*\n"
        "/set\\_coach ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ \\(–∞–¥–º–∏–Ω\\)\n"
        "/create\\_event –î–î\\.–ú–ú –¢–∏–ø ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/form\\_teams ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—è—Ç—ë—Ä–∫–∏"
    )
    await message.answer(text, parse_mode="MarkdownV2")

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã)
async def set_coach(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã
    chat_admins = await message.bot.get_chat_administrators(message.chat.id)
    if not any(admin.user.id == message.from_user.id for admin in chat_admins):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞")
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
    target_user = message.reply_to_message.from_user if message.reply_to_message else None
    if not target_user:
        await message.answer("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–æ–º")
        return
    
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("UPDATE users SET is_coach = 1 WHERE user_id = ?", (target_user.id,))
    conn.commit()
    conn.close()
    
    await message.answer(f"üëë {target_user.full_name} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–º!")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (—Ç—Ä–µ–Ω–µ—Ä)
async def create_event(message: types.Message):
    if not is_coach(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è")
        return
    
    try:
        _, date, event_type = message.text.split(maxsplit=2)
    except:
        await message.answer(
            "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/create_event –î–î.–ú–ú –¢–∏–ø\n"
            "–ü—Ä–∏–º–µ—Ä: /create_event 25.10 –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
        )
        return
    
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    c.execute("INSERT INTO events (date, type) VALUES (?, ?)", (date, event_type))
    event_id = c.lastrowid
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ë—É–¥—É", callback_data=f"mark_{event_id}_1"),
         InlineKeyboardButton(text="‚ùå –ù–µ –±—É–¥—É", callback_data=f"mark_{event_id}_0")]
    ])
    
    msg = await message.answer(
        f"üèí {event_type} {date}\n"
        "–ö—Ç–æ –±—É–¥–µ—Ç? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    c.execute("UPDATE events SET group_msg_id = ? WHERE event_id = ?", 
             (msg.message_id, event_id))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–µ—Ä–æ–º
def is_coach(user_id):
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("SELECT is_coach FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] == 1 if result else False

# –û—Ç–º–µ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è
async def mark_callback(callback: types.CallbackQuery):
    _, event_id, status = callback.data.split("_")
    event_id, status = int(event_id), int(status)
    user_id = callback.from_user.id
    
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –æ—Ç–º–µ—Ç–∫—É
    c.execute("DELETE FROM participants WHERE event_id = ? AND user_id = ?", 
             (event_id, user_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    if status == 1:
        c.execute("INSERT INTO participants (event_id, user_id) VALUES (?, ?)", 
                 (event_id, user_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    c.execute('''SELECT u.name FROM participants p
                 JOIN users u ON p.user_id = u.user_id
                 WHERE p.event_id = ?''', (event_id,))
    players = [row[0] for row in c.fetchall()]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = "‚úÖ –ë—É–¥—É—Ç:\n" + "\n".join(players) if players else "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª —É—á–∞—Å—Ç–∏–µ"
    
    try:
        await callback.message.edit_text(
            f"{callback.message.text.split('–ö—Ç–æ –±—É–¥–µ—Ç?')[0]}"
            f"–ö—Ç–æ –±—É–¥–µ—Ç?\n\n{status_text}",
            reply_markup=callback.message.reply_markup
        )
    except:
        pass  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    
    await callback.answer()
    conn.commit()
    conn.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    
    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start_command, Command("start"))
    dp.message.register(help_command, Command("help"))
    dp.message.register(set_coach, Command("set_coach"))
    dp.message.register(create_event, Command("create_event"))
    dp.callback_query.register(mark_callback, lambda c: c.data.startswith('mark_'))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())


from flask import Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
import threading
def run_server():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

threading.Thread(target=run_server, daemon=True).start()
