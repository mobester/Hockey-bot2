import os
import sqlite3
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from flask import Flask
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')
if not TOKEN:
    raise RuntimeError("TOKEN environment variable not set")

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Railway
app = Flask(__name__)

@app.route('/')
def home():
    return "–•–æ–∫–∫–µ–π–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, name TEXT, is_coach INTEGER DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS events
                 (event_id INTEGER PRIMARY KEY AUTOINCREMENT, date TEXT, type TEXT, status TEXT DEFAULT 'open', group_msg_id INTEGER)''')
    c.execute('''CREATE TABLE IF NOT EXISTS participants
                 (event_id INTEGER, user_id INTEGER,
                 FOREIGN KEY(event_id) REFERENCES events(event_id),
                 FOREIGN KEY(user_id) REFERENCES users(user_id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS teams
                 (team_id INTEGER PRIMARY KEY AUTOINCREMENT,
                  event_id INTEGER,
                  color TEXT,
                  players TEXT)''')
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–µ—Ä–æ–º
def is_coach(user_id):
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("SELECT is_coach FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] == 1 if result else False

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    user_id = message.from_user.id
    is_coach_user = is_coach(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [KeyboardButton(text="üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è")],
        [KeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–∏")]
    ]
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    if is_coach_user:
        keyboard.append([KeyboardButton(text="üëë –¢—Ä–µ–Ω–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é")])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
    keyboard.append([KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")])
    
    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    await message.answer("üèí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ö–æ–∫–∫–µ–π–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!", reply_markup=reply_markup)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start_command(message: types.Message):
    user = message.from_user
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, name) VALUES (?, ?)", (user.id, user.full_name))
    conn.commit()
    conn.close()
    
    await show_main_menu(message)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
async def show_events(message: types.Message):
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("SELECT event_id, date, type FROM events WHERE status = 'open' ORDER BY date DESC")
    events = c.fetchall()
    conn.close()
    
    if not events:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return
    
    text = "üèí –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for event in events:
        text += f"‚Ä¢ {event[2]} {event[1]} (ID: {event[0]})\n"
    
    await message.answer(text)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
async def show_events_to_mark(message: types.Message):
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("SELECT event_id, date, type FROM events WHERE status = 'open' ORDER BY date DESC")
    events = c.fetchall()
    conn.close()
    
    if not events:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    keyboard = []
    for event in events:
        keyboard.append([InlineKeyboardButton(
            text=f"{event[2]} {event[1]}", 
            callback_data=f"select_event_{event[0]}"
        )])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é
async def show_coach_menu(message: types.Message):
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="create_event")],
        [InlineKeyboardButton(text="üë• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—è—Ç—ë—Ä–∫–∏", callback_data="form_teams")],
        [InlineKeyboardButton(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="set_coach")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer("üëë –¢—Ä–µ–Ω–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
async def show_help(message: types.Message):
    text = (
        "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        "üèí <b>–î–ª—è –∏–≥—Ä–æ–∫–æ–≤</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–∏' —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏ –æ—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ\n\n"
        "üëë <b>–î–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n"
        "‚Ä¢ –í —Ç—Ä–µ–Ω–µ—Ä—Å–∫–æ–º –º–µ–Ω—é –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—è—Ç—ë—Ä–∫–∏ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞"
    )
    await message.answer(text, parse_mode="HTML")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (—á–µ—Ä–µ–∑ UI)
async def create_event_start(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_coach_menu")]
        ])
    )
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler

# –û—Ç–º–µ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏
async def select_event(callback: types.CallbackQuery):
    _, event_id = callback.data.split("_")
    event_id = int(event_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ—Ç–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ë—É–¥—É", callback_data=f"mark_{event_id}_1"),
            InlineKeyboardButton(text="‚ùå –ù–µ –±—É–¥—É", callback_data=f"mark_{event_id}_0")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_events")]
    ])
    
    await callback.message.edit_text(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ:",
        reply_markup=keyboard
    )

# –û—Ç–º–µ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è
async def mark_callback(callback: types.CallbackQuery):
    _, event_id, status = callback.data.split("_")
    event_id, status = int(event_id), int(status)
    user_id = callback.from_user.id
    
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –æ—Ç–º–µ—Ç–∫—É
    c.execute("DELETE FROM participants WHERE event_id = ? AND user_id = ?", 
             (event_id, user_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    if status == 1:
        c.execute("INSERT INTO participants (event_id, user_id) VALUES (?, ?)", 
                 (event_id, user_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    c.execute('''SELECT u.name FROM participants p
                 JOIN users u ON p.user_id = u.user_id
                 WHERE p.event_id = ?''', (event_id,))
    players = [row[0] for row in c.fetchall()]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = "‚úÖ –ë—É–¥—É—Ç:\n" + "\n".join(players) if players else "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª —É—á–∞—Å—Ç–∏–µ"
    
    try:
        await callback.message.edit_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ:\n\n{status_text}",
            reply_markup=callback.message.reply_markup
        )
    except:
        pass  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    
    await callback.answer()
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
async def handle_callback(callback: types.CallbackQuery):
    data = callback.data
    
    if data.startswith("select_event_"):
        await select_event(callback)
    
    elif data.startswith("mark_"):
        await mark_callback(callback)
    
    elif data == "create_event":
        await create_event_start(callback)
    
    elif data == "back_to_coach_menu":
        await show_coach_menu(callback.message)
    
    elif data == "back_to_events":
        await show_events_to_mark(callback.message)
    
    elif data == "set_coach":
        await set_coach_start(callback)
    
    elif data.startswith("select_coach_"):
        await select_coach(callback)

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
async def set_coach_start(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("SELECT user_id, name FROM users")
    users = c.fetchall()
    conn.close()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = []
    for user in users:
        keyboard.append([InlineKeyboardButton(
            text=user[1], 
            callback_data=f"select_coach_{user[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥", 
        callback_data="back_to_coach_menu"
    )])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–º:",
        reply_markup=reply_markup
    )

# –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
async def select_coach(callback: types.CallbackQuery):
    _, user_id = callback.data.split("_")
    user_id = int(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã
    chat_admins = await callback.bot.get_chat_administrators(callback.message.chat.id)
    if not any(admin.user.id == callback.from_user.id for admin in chat_admins):
        await callback.message.edit_text(
            "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="set_coach")]
            ])
        )
        await callback.answer()
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("UPDATE users SET is_coach = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute("SELECT name FROM users WHERE user_id = ?", (user_id,))
    user_name = c.fetchone()[0]
    conn.close()
    
    await callback.message.edit_text(
        f"üëë {user_name} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–º!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_coach_menu")]
        ])
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_main_menu(message: types.Message):
    text = message.text
    
    if text == "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è":
        await show_events(message)
    
    elif text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–∏":
        await show_events_to_mark(message)
    
    elif text == "üëë –¢—Ä–µ–Ω–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é":
        if is_coach(message.from_user.id):
            await show_coach_menu(message)
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ç—Ä–µ–Ω–µ—Ä–∞")
    
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await show_help(message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    
    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start_command, Command("start"))
    dp.message.register(handle_main_menu, lambda m: m.text in ["üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–∏", "üëë –¢—Ä–µ–Ω–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"])
    dp.callback_query.register(handle_callback)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
